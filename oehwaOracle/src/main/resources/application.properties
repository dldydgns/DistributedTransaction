server.port=8080

spring.application.name=kwdMysql

# Database 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/msi
spring.datasource.username=root
spring.datasource.password=root

# HikariCP 커넥션풀 타임아웃 옵션 (3초)
spring.datasource.hikari.connection-timeout=3000
spring.datasource.hikari.validation-timeout=3000
spring.datasource.hikari.maximum-pool-size=10

# JPA 설정
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true

# Kafka 설정
spring.kafka.bootstrap-servers=192.168.0.2:9092

# Producer 설정
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Consumer 설정
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# 🔥 필수: DTO 역직렬화에 사용할 패키지 경로 (여러 DTO/엔티티가 있으면 com.fisa.* 권장)
spring.kafka.consumer.properties.spring.json.trusted.packages=com.fisa.*

# ✅ DTO 기본 타입 반드시 패키지에 맞게! (아래 예시에서 DTO 실제 위치에 맞춰 수정)
spring.kafka.consumer.properties.spring.json.value.default.type=com.fisa.dto.DepositDTO

# (선택) 에러 핸들링 개선: ErrorHandlingDeserializer 사용 권장 (아래 주석 해제시 try-catch가 더 세밀해짐)
# spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
# spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
